给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。

输入：head = [1,2,3,4]
输出：[2,1,4,3]
示例 2：
输入：head = []
输出：[]
示例 3：
输入：head = [1]
输出：[1]
 
提示：

链表中节点的数目在范围 [0, 100] 内
0 <= Node.val <= 100


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head==None or head.next==None: # 其实不用特殊情况处理也可以，while能够达到目的
            return head
        dummy_head=ListNode(next=head)
        pre=dummy_head
        while pre.next and pre.next.next:
            first,second=pre.next,pre.next.next
            pre.next=second # 先将第二个结点连接到pre上
            first.next=second.next # 将第二个结点后面的链表摘下给第一个结点
            second.next=first # 第一个结点及原来第二个结点后面的链表接在第二个节点上
            pre=pre.next.next # 不可以pre=second，因为此时第二个结点是pre.next，应该是pre.next.next
        return dummy_head.next
