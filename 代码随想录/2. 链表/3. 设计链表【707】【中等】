设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。

示例：
MyLinkedList linkedList = new MyLinkedList();
linkedList.addAtHead(1);
linkedList.addAtTail(3);
linkedList.addAtIndex(1,2);   //链表变为1-> 2-> 3
linkedList.get(1);            //返回2
linkedList.deleteAtIndex(1);  //现在链表是1-> 3
linkedList.get(1);            //返回3
 

提示：
所有val值都在 [1, 1000] 之内。
操作次数将在  [1, 1000] 之内。
请不要使用内置的 LinkedList 库。


class ListNode: 
    # 单链表
    def __init__(self,val):
        self.val=val
        self.next=None

    # 双链表
    # def __init__(self,val):
    #     self.val=val
    #     self.next=None
    #     self.prev=None


class MyLinkedList:
    #单链表
    def __init__(self):
        self.head=ListNode(0)
        self.size=0

    # 双链表
    # def __init__(self):
    #     self.head,self.tail=ListNode(0),ListNode(0) # 首尾虚拟节点
    #     self.head.next,self.tail.prev=self.tail,self.tail
    #     self.size=0


    # 单链表
    def get(self, index: int) -> int:
        if self.size>index and index>=0:
            p=self.head
            for i in range(index+1): # 注意range范围
                p=p.next
            return p.val
        else:
            return -1 # 超出范围或者index为负

    # 双链表
    # def get(self, index: int) -> int:
    #     if self.size>index and index>=0:
    #         p=self.head
    #         for i in range(index+1): # 注意range范围
    #             p=p.next
    #         return p.val
    #     else:
    #         return -1 # 超出范围或者index为负

    def addAtHead(self, val: int) -> None: # 也可以用addAtIndex实现
        # new_head=ListNode(val)
        # if self.size==0: # 虚拟头结点后没有结点
        #     self.head.next=new_head
        # else:
        #     p=self.head.next
        #     self.head.next=new_head
        #     new_head.next=p
        # self.size+=1 # 注意size要+1

        self.addAtIndex(0, val)


    def addAtTail(self, val: int) -> None: # 也可以用addAtIndex实现
        # new_tail=ListNode(val)
        # p=self.head
        # for i in range(self.size): # 注意范围
        #     p=p.next
        # p.next=new_tail
        # self.size+=1

        self.addAtIndex(self.size, val)


    def addAtIndex(self, index: int, val: int) -> None: # 注意是插在index之前
        new_node=ListNode(val)
        if index>self.size: # 超出范围，直接return
            return
        elif index==0 and self.size==0: # 空链表，无需处理后面
            self.head.next=new_node
        elif index<=0: # 插在最前面 也可处理成if index<0 index=0
            p=self.head.next
            self.head.next=new_node
            new_node.next=p
        else: # 插在中间
            p=self.head
            for i in range(index):
                p=p.next
            q=p.next
            p.next=new_node
            new_node.next=q
        self.size+=1


    def deleteAtIndex(self, index: int) -> None:
        if index>=0 and index<self.size:
            p=self.head
            for i in range(index):
                p=p.next
            q=p.next.next
            p.next=q
            self.size-=1 # 注意-1


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
