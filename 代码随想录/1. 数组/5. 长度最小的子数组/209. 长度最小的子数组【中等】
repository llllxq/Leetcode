给定一个含有 n 个正整数的数组和一个正整数 target 。
找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。


示例 1：
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。

提示：
1 <= target <= 10^9
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^5


进阶：
如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        n=len(nums)
        tmp_sum,l,r,min_len=0,0,0,n+1
        while r<n: # 滑动窗口尾
            tmp_sum+=nums[r] # 尾部先不断往后直到找到符合条件的窗口
            while tmp_sum>=target:
                min_len=min(min_len,r-l+1)
                tmp_sum-=nums[l] # 不断后移窗口头部，找到最短
                l+=1
            r+=1
        if min_len==n+1: # n+1表示没有变化
            return 0
        else:
            return min_len
