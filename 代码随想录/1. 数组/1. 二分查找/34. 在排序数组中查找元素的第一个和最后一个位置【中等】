给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。
如果数组中不存在目标值 target，返回 [-1, -1]。
你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。

提示：
0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums 是一个非递减数组
-10^9 <= target <= 10^9


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int len=nums.size();
        vector<int> ans(2,-1);
        if(len==0){
            return ans;
        }
        int left=0,right=len-1;
        while(left<right){
            int middle=left+(right-left)/2;
            if(nums[middle]>=target){
                right=middle;
            }
            else{
                left=middle+1;
            }
        }
        if(nums[left]!=target){
            return ans;
        }
        else{
            ans[0]=left;
        }
        right=len;//len不是len-1，第二次找的是最后一个位置+1的位置(因为是左闭右开)，有可能超出边界。比如[1]
        while(left<right){
            int middle=left+(right-left)/2;
            if(nums[middle]<=target){
                left=middle+1;
            }
            else{
                right=middle;
            }
        }
        ans[1]=left-1;
        return ans;
    }
};
