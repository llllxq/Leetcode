给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
必须在不使用库的sort函数的情况下解决这个问题。

示例 1：
输入：nums = [2,0,2,1,1,0]
输出：[0,0,1,1,2,2]

提示：
n == nums.length
1 <= n <= 300
nums[i] 为 0、1 或 2
 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int freq[3]={0};
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==0)
                freq[0]++;
            else if(nums[i]==1)
                freq[1]++;
            else
                freq[2]++;
        }
        for(int i=0;i<n;i++){
            if(i<freq[0])
                nums[i]=0;
            else if(i>=freq[0]&&i<freq[0]+freq[1])
                nums[i]=1;
            else
                nums[i]=2;
        }
        // 法二：交换，0交换在最前面，2交换在最后面，1自动在中间
    }
};
