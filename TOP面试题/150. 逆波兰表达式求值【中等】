根据 逆波兰表示法，求表达式的值。
有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
注意 两个整数之间的除法只保留整数部分。
可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

示例 1：
输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9

提示：
1 <= tokens.length <= 10^4
tokens[i] 是一个算符（"+"、"-"、"*" 或 "/"），或是在范围 [-200, 200] 内的一个整数


class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack=[]
        for i in tokens:
            if i=="+" or i=="-" or i=="*" or i=="/": # 不能直接int(i)，因为如果是str会报错，则需要用try except
                n1=int(stack.pop()) # 需要int化，否则会变成str运算
                n2=int(stack.pop())
                if i=="+":
                    stack.append(n1+n2)
                elif i=="-":
                    stack.append(n2-n1)
                elif i=="*":
                    stack.append(n1*n2)
                else:
                    stack.append(int(n2/n1))
            else:
                stack.append(int(i))
        return stack[0]
