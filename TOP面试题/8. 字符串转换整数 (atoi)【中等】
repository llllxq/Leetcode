描述：请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。


class Solution {
public:
    int myAtoi(string s) {
        int len=s.size();
        int i=0;

        deleteSpace(s,i);
        // if(i==len)
        //     return 0;
        bool pos=isPositive(s,i);
        // if(i==len)
        //     return 0;
        getNum(s,i);
        long long ans=0;
        toNum(s,ans,pos);
        return (int)ans;
    }
    
    void deleteSpace(string &s,int &i){
        while(s[i]==' ')
            ++i;
    }

    bool isPositive(string &s,int &i){
        if(s[i]=='-'){
            ++i;
            return false;
        }
        else
            return true;
    }

    void getNum(string &s,int &i){
        int j=i;
        for(;s[j];++j){
            if(!isdigit(s[j]))
                break;
        }
        s=s.substr(i,j-i);
    }

    void toNum(string &s,long long &ans,bool pos){
        for(int i=0;s[i];++i){
            ans=ans*10+s[i]-'0';
            if((pos&&ans>INT_MAX)||(!pos&&-ans<INT_MIN)){
                if(pos)
                    ans=INT_MAX;
                else
                    ans=INT_MIN;
                return;
            }
        }
        if (!pos) {
            ans=-ans;
        }
    }
};






class Solution {
public:
    int myAtoi(string s) {
        int i = 0;
        int n = s.size();

        deleteSpace(s, i);

        if (i == n) {
            return 0;
        }
        bool pos = isPositive(s, i);

        if (i == n) {
            return 0;
        }
        getNum(s, i);
      
        long long ans = 0;
        toNum(s, ans, pos);
              
        return (int)ans;
    }

private:
    void deleteSpace(string &s, int &i) {
        while (s[i] == ' ') {
            ++i;
        }
    }

    bool isPositive(string &s, int &i) {
        if (s[i] == '-') {
            ++i;
            return false;
        }        
        else if (s[i] == '+'){
            ++i;
            return true;
        }
        else {
            return true;
        }
    }

    void getNum(string &s, int &i) {
       int j = i;
        for (; s[j]; ++j) {
            if (!isdigit(s[j])) {
                break;
            }
        }
        s = s.substr(i, j - i);
    }

    void toNum(string &s, long long &ans, bool flag) {
        for (int i = 0; s[i]; ++i) {
            ans = ans * 10 + s[i] - '0'; 
            if ((flag && ans > INT_MAX) || (!flag && -ans < INT_MIN)) {
                if (flag) {
                    ans = INT_MAX;
                }
                else {
                    ans = INT_MIN;
                } 
                return;
            }
        }

        if (!flag) {
            ans = -ans;
        }
    }
};


