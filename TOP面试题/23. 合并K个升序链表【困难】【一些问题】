给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // 分治法
    ListNode* mergeTwoLists(ListNode *a, ListNode *b) {
        if ((!a) || (!b)) return a ? a : b;
        ListNode head, *tail = &head, *aPtr = a, *bPtr = b;
        while (aPtr && bPtr) {
            if (aPtr->val < bPtr->val) {
                tail->next = aPtr; aPtr = aPtr->next;
            } else {
                tail->next = bPtr; bPtr = bPtr->next;
            }
            tail = tail->next;
        }
        tail->next = (aPtr ? aPtr : bPtr);
        return head.next;
    }

    ListNode* merge(vector <ListNode*> &lists, int l, int r) {
        if (l == r) return lists[l];
        if (l > r) return nullptr;
        int mid = (l + r) >> 1;
        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size() - 1);
    }
    // 总体超时
    // ListNode* mergeKLists(vector<ListNode*>& lists){
    //     return merge(lists,0,lists.size()-1);
    // }
    // ListNode* merge(vector<ListNode*>& lists, int left, int right){
    //     if(left==right)
    //         return lists[1];
    //     if(left>right)
    //         return NULL;
    //     int mid=left+(right-left)/2;
    //     return mergeTwoLists(merge(lists,1,mid),merge(lists,mid+1,right));
    // }
    // ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {//递归法
    //     if((!list1)||(!list2))
    //         return list1?list1:list2;
    //     ListNode head,*tail=&head,*l1=list1,*l2=list2;
    //     while(l1&&l2){
    //         if(l1->val<l2->val){
    //             tail->next=l1;
    //             l1=l1->next;
    //         }
    //         else{
    //             tail->next=l2;
    //             l2=l2->next;
    //         }
    //         tail=tail->next;
    //     }
    //     tail->next=(l1?l1:l2);
    //     return head.next;
    // }

    // // 长用例超时
    // ListNode* mergeKLists(vector<ListNode*>& lists) {
    //     if(lists.size()==0)
    //         return NULL;
    //     else if(lists.size()==1)
    //         return lists[0];
    //     else{
    //         int mid=lists.size()/2;
    //         vector<ListNode*> list1(mid),list2(lists.size()-1);
    //         for(int i=0;i<mid;i++)
    //             list1[i]=lists[i];
    //         for(int i=mid,j=0;i<lists.size();i++,j++)
    //             list2[j]=lists[i];
    //         return mergeTwoLists(mergeKLists(list1),mergeKLists(list2));
    //     }
    // }
    // ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {//递归法
    //     if(list1==NULL)
    //         return list2;
    //     else if(list2==NULL)
    //         return list1;
    //     else if(list1->val<list2->val){
    //         list1->next=mergeTwoLists(list1->next,list2);//确定当前的大小后，递归后面的大小
    //         return list1;
    //     }
    //     else{
    //         list2->next=mergeTwoLists(list1,list2->next);
    //         return list2;
    //     }
    // }
};
