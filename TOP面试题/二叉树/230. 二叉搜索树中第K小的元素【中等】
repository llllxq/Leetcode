给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。

 输入：root = [3,1,4,null,2], k = 1
输出：1

提示：
树中的节点数为 n 。
1 <= k <= n <= 10^4
0 <= Node.val <= 10^4

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        # k递减到0即可
        stack=[]
        while root or stack:
            while root:
                stack.append(root)
                root=root.left
            root=stack.pop()
            k-=1
            if k==0:
                return root.val
            else:
                root=root.right
        # 遍历所有找k
        # stack=[]
        # def inorder(root):
        #     if not root:
        #         return
        #     inorder(root.left)
        #     stack.append(root.val)
        #     inorder(root.right)
        # inorder(root)
        # return stack[k-1]
        
