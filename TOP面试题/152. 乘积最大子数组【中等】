给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。
测试用例的答案是一个 32-位 整数。
子数组 是数组的连续子序列。

示例 1:
输入: nums = [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6

提示:
1 <= nums.length <= 2 * 10^4
-10 <= nums[i] <= 10
nums 的任何前缀或后缀的乘积都 保证 是一个 32-位 整数



class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        # dp法，与传统单式dp不同，这里由于会出现负数相乘得最大值得情况，因此有两个dp式
        maxdp=[nums[0]]*len(nums)
        mindp=[nums[0]]*len(nums)
        for i in range(1,len(nums)):
            maxdp[i]=max(maxdp[i-1]*nums[i],max(mindp[i-1]*nums[i],nums[i]))
            mindp[i]=min(mindp[i-1]*nums[i],min(maxdp[i-1]*nums[i],nums[i]))
        return max(maxdp)
