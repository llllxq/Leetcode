给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组 是数组中的一个连续部分。

示例 1：
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
示例 2：
输入：nums = [1]
输出：1
示例 3：
输入：nums = [5,4,-1,7,8]
输出：23

提示：
1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4



class Solution {
public:
    // 贪心：滑动窗口判断当前值与包括当前值的前序数字之和的大小，留下较大者
    // int maxSubArray(vector<int>& nums) {
    //     int temp=0,maxSum=nums[0],n=nums.size();
    //     for(int i=0;i<n;i++){
    //         temp=max(temp+nums[i],nums[i]);
    //         maxSum=max(maxSum,temp);
    //     }
    //     return maxSum;
    // }
    // 动态规划：如果前一个值＞0，则加到当前值上作为当前值的新值
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        for(int i=1;i<n;i++){
            if(nums[i-1]>0)
                nums[i]+=nums[i-1];
        }
        int maxSum = *max_element(nums.begin(),nums.end());  
        return maxSum;
    }
};
