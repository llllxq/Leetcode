给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。

输入：head = [4,2,1,3]
输出：[1,2,3,4]

提示：
链表中节点的数目在范围 [0, 5 * 10^4] 内
-10^5 <= Node.val <= 10^5

进阶：你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def merge(head1: Optional[ListNode],head2: Optional[ListNode]) -> Optional[ListNode]:
            if not head1:
                return head2
            if not head2:
                return head1
            if head1.val<=head2.val:
                head1.next=merge(head1.next,head2)
                return head1
            else:
                head2.next=merge(head2.next,head1)
                return head2
        def mergeSort(head: Optional[ListNode]) -> Optional[ListNode]:
            if not head or not head.next:
                return head
            slow,fast,newhead=head,head,head
            while fast and fast.next:
                fast=fast.next.next
                newhead=slow
                slow=slow.next
            newhead.next=None # 需要断开两段，否则h1递归的时候会陷入死循环，栈溢出
            h1=mergeSort(head)
            h2=mergeSort(slow)
            return merge(h1,h2)
        return mergeSort(head)

        # def partition(right:Optional[ListNode],left:Optional[ListNode])->Optional[ListNode]:
        #     if left and right and left.next:
        #         if right==left or left.next==right:
        #             return left
        #         pivot=left
        #         p=left
        #         q=left.next
        #         while q!=right and q:
        #             if q.val<pivot.val:
        #                 p=p.next
        #                 tmp=p.val
        #                 p.val=q.val
        #                 q.val=tmp
        #             q=q.next
        # def quickSort(head:Optional[ListNode],tail:Optional[ListNode])->Optional[ListNode]:
        #     if head==tail or head.next==tail:
        #         return head
        #     part=partition(head,tail)
        #     quickSort(head,part)
        #     quickSort(part.next,tail)
        #     return head
        # if not head or not head.next:
        #     return head
        # a=head.next
        # while a.next:
        #     a=a.next
        # tail=a
        # return quickSort(head,tail)
