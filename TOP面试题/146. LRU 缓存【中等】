请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。
实现 LRUCache 类：
LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存
int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。
void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。
函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。
 
示例：
输入
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
输出
[null, null, null, 1, null, -1, null, -1, 3, 4]
解释
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // 缓存是 {1=1}
lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}
lRUCache.get(1);    // 返回 1
lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}
lRUCache.get(2);    // 返回 -1 (未找到)
lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}
lRUCache.get(1);    // 返回 -1 (未找到)
lRUCache.get(3);    // 返回 3
lRUCache.get(4);    // 返回 4
 
提示：

1 <= capacity <= 3000
0 <= key <= 10000
0 <= value <= 10^5
最多调用 2 * 10^5 次 get 和 put



class Node:
    def __init__(self,key=0,value=0):
        self.key=key
        self.value=value
        self.pre=None
        self.next=None

class LRUCache:

    def __init__(self, capacity: int):
        self.hashmap=dict()
        self.capacity=capacity
        self.num=0
        self.head=Node()
        self.tail=Node()
        self.head.next=self.tail
        self.tail.pre=self.head

    def get(self, key: int) -> int:
        if key in self.hashmap:
            n=self.hashmap[key]
            # 先删除
            n.pre.next=n.next
            n.next.pre=n.pre
            # 再添加到最前面
            n.pre=self.head
            n.next=self.head.next
            self.head.next.pre=n
            self.head.next=n
            return n.value
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.hashmap:
            n=self.hashmap[key]
            n.value=value
            # 先删除再移到最前面
            n.pre.next=n.next
            n.next.pre=n.pre
            n.pre=self.head
            n.next=self.head.next
            self.head.next.pre=n
            self.head.next=n
        else:
            n=Node(key,value)
            self.hashmap[key]=n
            # 添加并放在最前面
            n.pre=self.head
            n.next=self.head.next
            self.head.next.pre=n
            self.head.next=n
            self.num+=1
            if self.num>self.capacity:
                # 删除超过容量的尾部结点
                remove=self.tail.pre
                remove.pre.next=remove.next
                remove.next.pre=remove.pre
                self.hashmap.pop(remove.key)
                self.num-=1

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
