给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。
回文串 是正着读和反着读都一样的字符串。

示例 1：
输入：s = "aab"
输出：[["a","a","b"],["aa","b"]]
示例 2：
输入：s = "a"
输出：[["a"]]
 
提示：
1 <= s.length <= 16
s 仅由小写英文字母组成



class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        n=len(s)
        ans=[]
        tmp=[]
        def dfs(s,start):
            if start>=n: # 起始位置超出下界，递归结束
                return ans.append(tmp[:])
            for i in range(start,n):
                p=s[start:i+1] # [start:i+1)子串
                if p==p[::-1]: # 判断是否为回文
                    tmp.append(p)
                else:
                    continue
                dfs(s,i+1) # 寻找i+1起始的字串
                tmp.pop()
        dfs(s,0)
        return ans
