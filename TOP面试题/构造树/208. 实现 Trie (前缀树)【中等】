Trie（发音类似 "try"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。

请你实现 Trie 类：

Trie() 初始化前缀树对象。
void insert(String word) 向前缀树中插入字符串 word 。
boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。
boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。

提示：

1 <= word.length, prefix.length <= 2000
word 和 prefix 仅由小写英文字母组成
insert、search 和 startsWith 调用次数 总计 不超过 3 * 10^4 次

class Trie:

    def __init__(self):
        self.root={} # 字典形式

    def insert(self, word: str) -> None:
        node=self.root
        for s in word:
            node=node.setdefault(s,{}) # setdefault有则返回对应的值，没有则创建并返回{}
        node['#']='#' # 定义一个结束结点用于标记

    def search(self, word: str) -> bool:
        node=self.root
        for s in word:
            if s not in node:
                return False
            node=node[s] # 往下走
        if '#' in node:
            return True 
        else:
            return False # 最后不是#表示还没到结束，只存在于前缀，search失败

    def startsWith(self, prefix: str) -> bool: # 与search基本相同，只要存在于前缀就成功
        node=self.root
        for s in prefix:
            if s not in node:
                return False
            node=node[s]
        return True



# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
