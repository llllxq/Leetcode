给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。

提示：
1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1
0 <= k <= 10^5

进阶：
尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。
你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # 另辟空间法
        # a=nums[:]
        # n=len(nums)
        # for i in range(n):
        #     nums[(i+k)%n]=a[i]
        # return nums 无需返回，注释掉从8%-62%

        # 三次反转区间法
        def reverse_cut(i,j):
            while i<j:
                nums[i],nums[j]=nums[j],nums[i]
                i+=1
                j-=1
        n=len(nums)
        k%=n
        nums.reverse() # 整体反转
        reverse_cut(0,k-1) # 反转前k
        reverse_cut(k,n-1) # 反转后n-k
