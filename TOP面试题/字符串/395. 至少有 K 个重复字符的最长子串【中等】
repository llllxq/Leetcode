给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。返回这一子串的长度。

示例 1：
输入：s = "aaabb", k = 3
输出：3
解释：最长子串为 "aaa" ，其中 'a' 重复了 3 次。
示例 2：
输入：s = "ababbc", k = 2
输出：5
解释：最长子串为 "ababb" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。
 

提示：
1 <= s.length <= 10^4
s 仅由小写英文字母组成
1 <= k <= 10^5


class Solution {
public:
    int longestSubstring(string s, int k) {
        //递归：如果一个字符 cc 在 ss 中出现的次数少于 kk 次，那么 ss 中所有的包含 cc 的子字符串都不能满足题意。所以在 ss 的所有不包含 cc 的子字符串中继续寻找结果：把 ss 按照 cc 分割（分割后每个子串都不包含 cc），得到很多子字符串 tt；下一步要求 tt 作为源字符串的时候，它的最长的满足题意的子字符串长度（把大问题分割为了小问题(ss → tt)）。用函数 longestSubstring(s, k)递归，直接把 longestSubstring(s, k) 函数拿来用，于是形成了递归。未进入递归时的返回结果：如果 ss 中的每个字符出现的次数都大于 kk 次，那么 ss 就是要求的字符串，直接返回该字符串的长度。
        int n=s.size();
        if(n<k)
            return 0;
        if(k<2)
            return n;
        int dic[26]={0};
        for(auto i:s)
            dic[i-'a']++;
        int a=0;
        while(a<n&&dic[s[a]-'a']>=k)
            a++;
        if(a==n) //不加会溢出
            return n;
        int left=longestSubstring(s.substr(0,a),k);
        while(a<n&&dic[s[a]-'a']<k)
            a++;
        int right=longestSubstring(s.substr(a),k);
        return max(left,right);
    }
};
