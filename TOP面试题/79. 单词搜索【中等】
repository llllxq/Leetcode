给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例 3：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
输出：false
 
提示：
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board 和 word 仅由大小写英文字母组成



class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """  
        dir=[(0,1),(0,-1),(1,0),(-1,0)]
        def find(i,j,k):
            if board[i][j]!=word[k]:
                return False
            if k==len(word)-1:
                return True
            visited.add((i,j))
            ans=False
            for oldi,oldj in dir:
                newi,newj=i+oldi,j+oldj
                if 0<=newi<len(board) and 0<=newj<len(board[0]):
                    if (newi,newj) not in visited:
                        if find(newi,newj,k+1):
                            ans=True
                            break
            visited.remove((i,j))
            return ans
        visited=set()
        for i in range(len(board)):
            for j in range(len(board[0])):
                if find(i,j,0):
                    return True
        return False
