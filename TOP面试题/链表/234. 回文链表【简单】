给你一个单链表的头节点 head ，请你判断该链表是否为回文链表。如果是，返回 true ；否则，返回 false 。

提示：

链表中节点数目在范围[1, 10^5] 内
0 <= Node.val <= 9

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        fast=head
        slow=head
        inverse=head
        inverse_tail=None
        while fast and fast.next:
            inverse=slow
            slow=slow.next
            fast=fast.next.next
            inverse.next=inverse_tail
            inverse_tail=inverse
        if fast:#单数此时slow在中间，往后走一步
            slow=slow.next
        while slow:
            if inverse.val==slow.val:
                inverse=inverse.next
                slow=slow.next
            else:
                return False
        return True
