你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。
在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。
例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。
请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。

示例 1：
输入：numCourses = 2, prerequisites = [[1,0]]
输出：true
解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。

提示：
1 <= numCourses <= 1^05
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
prerequisites[i] 中的所有课程对 互不相同


class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        n=len(prerequisites)
        if n==0 or numCourses<=1:
            return True
        
        def dfs(i,flag,adj):
            if flag[i]==1: # 结点i已经被当前开头的dfs访问，第2次访问
                return False
            if flag[i]==-1: # 结点i已经被其他开头的dfs访问，无需再访问
                return True
            flag[i]=1 # 本轮dfs已经访问
            for j in adj[i]:
                if not dfs(j,flag,adj):
                    return False
            flag[i]=-1 # 当前结点所有邻接结点均已被访问
            return True
        
        flag=[0]*numCourses
        adj=[[]for i in range(numCourses)] # [[0],[1]]表示0的邻接是1，1的邻接是0
        for second,first in prerequisites:
            adj[first].append(second)
        for i in range(numCourses):
            if not dfs(i,flag,adj):
                return False
        return True
            
