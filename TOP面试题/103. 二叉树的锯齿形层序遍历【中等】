给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。

示例 1：
输入：root = [3,9,20,null,null,15,7]
输出：[[3],[20,9],[15,7]]
示例 2：
输入：root = [1]
输出：[[1]]
示例 3：
输入：root = []
输出：[]

提示：
树中节点数目在范围 [0, 2000] 内
-100 <= Node.val <= 100


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def zigzagLevelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        ans=[]
        q=[root]
        ltor=True
        while q:
            tmp=[]# 返回的是二维list，所以在此需要初始化内层list
            size=len(q)
            for i in range(size):
                first=q[0]
                del(q[0])# q.pop()是删除并返回最后一个值
                if ltor:# 如果是从左往右，则将当前取出的值按顺序放入
                    tmp.append(first.val)
                else:# 如果是从右往左，则将值放在最前面
                    tmp.insert(0,first.val)
                if first.left:# 下一层结点值进入队列
                    q.append(first.left)
                if first.right:
                    q.append(first.right)
            ans.append(tmp)
            ltor=not ltor
        return ans

            

            
